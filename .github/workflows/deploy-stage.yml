name: CloudApp Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: ${{ env.PRODUCT_VERSION }}
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      - name: Setup PostgreSQL Server
        uses: ikalnytskyi/action-setup-postgres@v4
        with:
          username: hariharansundaram
          password: gautham123
          database: hariharansundaram
          port: 5432
        id: postgres

      - name: Test application
        run: mvn test
        env:
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
          AWS_REGION: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Package application
        run: mvn package -Dmaven.test.skip
        env:
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
          AWS_REGION: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Create deployment folder
        run: |
          mkdir -p CloudAppRelease && cp ./target/cloud.app-0.0.1-SNAPSHOT.jar CloudAppRelease/cloud.app-0.0.1-SNAPSHOT.jar &&
          cp ./application-prod.properties CloudAppRelease/application-prod.properties && cp ./users.csv CloudAppRelease/users.csv &&
          cp ./start.sh CloudAppRelease/start.sh && cp ./cloudapp.service CloudAppRelease/cloudapp.service &&
          cp ./cloudwatch-config.json  CloudAppRelease/cloudwatch-config.json

      - name: Create zip of deployment folder
        uses: montudor/action-zip@v1
        with:
          args: zip -qq -r CloudAppRelease.zip CloudAppRelease

      - name: Run `packer init`
        id: init
        run: "packer init aws-ec2.pkr.hcl"

      - name: Run `packer build`
        id: build
        run: "packer build aws-ec2.pkr.hcl"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
          AWS_DEFAULT_SUBNET: ${{ vars.AWS_DEFAULT_SUBNET }}

      - name: Extract ami id
        run: echo "AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)" >> $GITHUB_ENV
      
      - name: Run `update-autoscaling.sh`
        id: update-autoscale
        run: |
         chmod +x ./update-autoscaling.sh
         ./update-autoscaling.sh
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
          AMI_ID: ${{ env.AMI_ID }}
      